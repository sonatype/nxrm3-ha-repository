# Declare variables to be passed into your templates.
namespaces:
  nexusNs: nexusrepo
  cloudwatchNs: amazon-cloudwatch
  externaldnsNs: nexus-externaldns
azure:
  enabled: false  #set to true to enable azure specific yamls/snippets
  keyvault:
    enabled: false # set to true to pull license, db and nexus admin password secrets from azure key vault
aws:
  enabled: false #set to true to enable aws specific yamls like external dns and fluent bit
  clusterRegion: us-east-1
  secretmanager:
    enabled: false # set to true to pull license, db and nexus admin password secrets from aws secret manager
  externaldns:
    enabled: false
    domainFilter: example.com #your root domain e.g example.com
    awsZoneType: private # hosted zone to look at (valid values are public, private or no value for both)
  fluentbit:
    enabled: false #set this to true to enable sending of logs to CloudWatch
    fluentBitVersion: 2.28.0
    clusterName: nxrm-nexus
  serviceAccount:
    name: nexus-repository-deployment-sa #This service account in managed by Helm
    role: arn:aws:iam::000000000000:role/nxrm-nexus-role #Role created in the "AWS Secrets Manager" section of the HA documentation
    externaldns:
      name: external-dns
      role: arn:aws:iam::000000000000:role/nexusrepo-external-dns-irsa-role #Role with route53 permissions needed by external-dns
statefulset:
  name: nxrm-statefulset
  serviceName: nxrm-statefulset-service
  replicaCount: 3
  initContainer:
    image:
      repository: busybox
      tag: 1.33.1
    resources:
      limits:
        cpu: "0.2"
        memory: "512Mi"
      requests:
        cpu: "0.1"
        memory: "256Mi"
  container:
    image:
      repository: sonatype/nexus3
      tag: latest
    resources:
      # See help documentation, these are minimum system requirements
      requests:
        cpu: 4
        memory: "8Gi"
      limits:
        cpu: 4
        memory: "8Gi"
    containerPort: 8081
    pullPolicy: IfNotPresent
    terminationGracePeriod: 120
    env:
      nexusDBName: nexus
      nexusDBPort: 5432
      install4jAddVmParams: "-Xms2703m -Xmx2703m"
      jdbcUrlParams: null # Must start with a '?' e.g. "?foo=bar&baz=foo"
  requestLogContainer:
    image:
      repository: busybox
      tag: 1.33.1
    resources:
      limits:
        cpu: "0.2"
        memory: "512Mi"
      requests:
        cpu: "0.1"
        memory: "256Mi"
  auditLogContainer:
    image:
      repository: busybox
      tag: 1.33.1
    resources:
      limits:
        cpu: "0.2"
        memory: "512Mi"
      requests:
        cpu: "0.1"
        memory: "256Mi"
  taskLogContainer:
    image:
      repository: busybox
      tag: 1.33.1
    resources:
      limits:
        cpu: "0.2"
        memory: "512Mi"
      requests:
        cpu: "0.1"
        memory: "256Mi"
  livenessProbe:
    failureThreshold: 6
    initialDelaySeconds: 120
    path: /
    periodSeconds: 60
  readinessProbe:
    failureThreshold: 6
    initialDelaySeconds: 120
    path: /
    periodSeconds: 60
  imagePullSecrets: {}
ingress:
  name: "nexus-ingress"
  enabled: false
  host: null #host to apply this ingress rule to e.g. example.com. Set it as you wish
  dockersubdomain: false # uncomment this if you'd like to create a wildcard rule in your ingress for docker sub domain routing. This will result in the creation of routing rules in your load balancer for sub domains of your host. Thus, you must also set the host
  defaultRule: false
  additionalRules: null
  ingressClassName: null # e.g. nginx, alb
  tls:
    enabled: false
    secretName: "tlsSecretName"
  annotations:
#  Note: the annotations below are just a guide; delete or insert more as needed depending on your use case: aws, azure, on prem
#    nginx.ingress.kubernetes.io/ssl-redirect: "false"
#    alb.ingress.kubernetes.io/scheme: internal # scheme
#    alb.ingress.kubernetes.io/subnets: subnet-1,subnet-2 #comma separated list of subnet ids
    # alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":443}]'
    # alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-1:0000000000000:certificate/00000000-1111-2222-3333-444444444444  # The AWS Certificate Manager ARN for your HTTPS certificate
#    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-1:0000000000000:certificate/00000000-1111-2222-3333-444444444444  # Comment out if you don't use docker repositories - The AWS Certificate Manager ARN for your HTTPS certificate
#    external-dns.alpha.kubernetes.io/hostname: dockerrepo1.example.com, dockerrepo2.example.com, dockerrepo3.example.com
  dockerIngress:  #Ingress for Docker Connector - comment out if you don't use docker repositories
    enabled: false
    name: "docker-ingress"
  #     kubernetes.io/ingress.class: alb # comment out if you don't use docker repositories
  #     alb.ingress.kubernetes.io/scheme: internal # scheme comment out if you don't use docker repositories
  #     alb.ingress.kubernetes.io/subnets: subnet-1,subnet-2 #comma separated list of subnet ids, comment out if you don't use docker repositories
    annotations:
storageClass:
  enabled: false # For built-in storage class, set storageClass.enabled to false
  name: nexus-storage # For built-in storage class, set storageClass.enabled to false and specify the name of the built-in storage class here e.g. managed-csi for AKS
  provisioner: provisionerName # To use your own storage class set storageClass.enabled to true and specify provisioner. E.g. for AKS use managed-csi. For AWS EKS: ebs.csi.aws.com. In case of AWS EKS cluster running version less than 1.23 use 'kubernetes.io/aws-ebs'
  volumeBindingMode: "WaitForFirstConsumer"
  reclaimPolicy: Retain
#  parameters:
#    type: type
#    fsType: "fsType" # e.g. ext4
#    iopsPerGB: "10"
pvc:
  accessModes: ReadWriteOnce
  storage: 2Gi
  volumeClaimTemplate:
    enabled: false

service:  #Nexus Repo NodePort Service
  nexus:
    enabled: false
    name: "nexus-service"
    type: NodePort
    protocol: TCP
    port: 80
    targetPort: 8081
  docker:  #Nodeport Service for Docker Service
    name: "nexus-docker-service"
    enabled: false
    type: NodePort
    protocol: TCP
    port: 9090
    targetPort: 8081
secret:
  secretProviderClass: "secretProviderClass"
  provider: provider # e.g. aws, azure etc
  dbSecret:
    name: "nxrm-db-secret"
    enabled: false # Enable to apply database-secret.yaml which allows you to specify db credentials
  db:
    user: nxrm-db-user
    userAlias: nxrm-db-user-alias
    password: nxrm-db-password
    passwordAlias: nxrm-db-password-alias
    host: nxrm-db-host
    hostAlias: nxrm-db-host-alias
  nexusAdmin:
    name: "nexusAdminPassword"
    alias: "admin-nxrm-password-alias"
  nexusAdminSecret:
    enabled: false # Enable to apply nexus-admin-secret.yaml which allows you to the initial admin password for nexus repository
    adminPassword: yourinitialnexuspassword #You should change this when you login for the first time
  license:
    name: nexus-repo-license.lic
    licenseSecret:
      enabled: false
      fileContentsBase64: your_license_file_contents_in_base_64
      mountPath: /var/nexus-repo-license
  azure:
    # a managed identity or service principal that has secrets management access to the key vault
    userAssignedIdentityID: "userAssignedIdentityID"
    tenantId: "azureTenantId"
    keyvaultName: yourazurekeyvault
    useVMManagedIdentity: true
    usePodIdentity: false
  aws:
    license:
      arn: arn:aws:secretsmanager:us-east-1:000000000000:secret:nxrm-nexus-license
    adminpassword:
      arn: arn:aws:secretsmanager:us-east-1:000000000000:secret:admin-nxrm-password
    rds:
      arn: arn:aws:secretsmanager:us-east-1:000000000000:secret:nxrmrds-cred-nexus

