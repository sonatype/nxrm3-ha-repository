# Declare variables to be passed into your templates.
namespaces:
  nexusNs: nexusrepo
  cloudwatchNs: amazon-cloudwatch
  externaldnsNs: nexus-externaldns
serviceAccount:
  enabled: false
  name: nexus-repository-deployment-sa #This service account in managed by Helm
  annotations:
    # Set annotations for service account. E.g. if deploying to AWS EKS
    # and secrets manager is enabled then this role should have permissions for using secret manager.
    # If using externaldns, role with route53 permissions needed by external-dns
    # eks.amazonaws.com/role-arn: arn:aws:iam::000000000000:role/nxrm-nexus-role
azure:
  enabled: false  #set to true to enable azure specific yamls/snippets
  keyvault:
    enabled: false # set to true to pull license, db and nexus admin password secrets from azure key vault
aws:
  enabled: false #set to true to enable aws specific yamls like external dns and fluent bit
  clusterRegion: us-east-1
  secretmanager:
    enabled: false # set to true to pull license, db and nexus admin password secrets from aws secret manager
  externaldns:
    enabled: false
    domainFilter: example.com #your root domain e.g example.com
    awsZoneType: private # hosted zone to look at (valid values are public, private or no value for both)
  fluentbit:
    enabled: false #set this to true to enable sending of logs to CloudWatch
    fluentBitVersion: 2.28.0
    clusterName: nxrm-nexus
statefulset:
  name: nxrm-statefulset
  serviceName: nxrm-statefulset-service
  replicaCount: 3
  clustered: true
  additionalVolumes:
  additionalVolumeMounts:
  additionalContainers:
  # # Add annotations to statefulset to enhance configurations
  annotations: {}
  podAnnotations: {}
  nodeSelector: {}
  # hostAliases allows the modification of the hosts file inside a container
  hostAliases: []
  # - ip: "192.168.1.10"
  #   hostnames:
  #   - "example.com"
  #   - "www.example.com"

  # Uncomment and modify this to run a command after starting the nexus container.
  postStart:
    command: null   # '["/bin/sh", "-c", "ls"]'
  preStart:
    command: null

  # # Add init containers. e.g. to be used to give specific permissions for nexus-data.
  # # Add your own init containers as needed
  initContainers:
    # chown nexus-data to 'nexus' user and init log directories/files for a new pod
    # otherwise the side car containers will crash a couple of times and backoff whilst waiting
    # for nxrm-app to start and this increases the total start up time.
    - name: chown-nexusdata-owner-to-nexus-and-init-log-dir
      image: busybox:1.33.1
      command: [/bin/sh]
      args:
        - -c
        - >-
          mkdir -p /nexus-data/etc/logback &&
          mkdir -p /nexus-data/log/tasks &&
          mkdir -p /nexus-data/log/audit &&
          touch -a /nexus-data/log/tasks/allTasks.log &&
          touch -a /nexus-data/log/audit/audit.log &&
          touch -a /nexus-data/log/request.log &&
          chown -R '200:200' /nexus-data
      volumeMounts:
        - name: nexus-data
          mountPath: /nexus-data
      resources:
        limits:
          cpu: "0.2"
          memory: "512Mi"
        requests:
          cpu: "0.1"
          memory: "256Mi"
  container:
    image:
      repository: sonatype/nexus3
      tag: latest
    resources:
      # See help documentation, these are minimum system requirements
      requests:
        cpu: 4
        memory: "8Gi"
      limits:
        cpu: 4
        memory: "8Gi"
    containerPort: 8081
    pullPolicy: IfNotPresent
    terminationGracePeriod: 120
    env:
      nexusDBName: nexus
      nexusDBPort: 5432
      install4jAddVmParams: "-Xms2703m -Xmx2703m"
      jdbcUrlParams: null # Must start with a '?' e.g. "?foo=bar&baz=foo"
  requestLogContainer:
    image:
      repository: busybox
      tag: 1.33.1
    resources:
      limits:
        cpu: "0.2"
        memory: "512Mi"
      requests:
        cpu: "0.1"
        memory: "256Mi"
  auditLogContainer:
    image:
      repository: busybox
      tag: 1.33.1
    resources:
      limits:
        cpu: "0.2"
        memory: "512Mi"
      requests:
        cpu: "0.1"
        memory: "256Mi"
  taskLogContainer:
    image:
      repository: busybox
      tag: 1.33.1
    resources:
      limits:
        cpu: "0.2"
        memory: "512Mi"
      requests:
        cpu: "0.1"
        memory: "256Mi"
  livenessProbe:
    failureThreshold: 6
    initialDelaySeconds: 120
    path: /
    periodSeconds: 60
  readinessProbe:
    failureThreshold: 6
    initialDelaySeconds: 120
    path: /
    periodSeconds: 60
  imagePullSecrets: {}
ingress:
  name: "nexus-ingress"
  enabled: false
  host: null #host to apply this ingress rule to e.g. example.com. Set it as you wish
  hostPath: /
  dockersubdomain: false # uncomment this if you'd like to create a wildcard rule in your ingress for docker sub domain routing. This will result in the creation of routing rules in your load balancer for sub domains of your host. Thus, you must also set the host
  defaultRule: false
  additionalRules: null
  ingressClassName: null # e.g. nginx, alb
#  tls:
#    - secretName: "tlsSecretName1"
#      hosts:
#      - repo.foo1
#      - repo.bar1
#    - secretName: "tlsSecretName2"
#      hosts:
#        - repo.foo2
#        - repo.bar2
  annotations:
#  Note: the annotations below are just a guide; delete or insert more as needed depending on your use case: aws, azure, on prem
#    nginx.ingress.kubernetes.io/ssl-redirect: "false"
#    alb.ingress.kubernetes.io/scheme: internal # scheme
#    alb.ingress.kubernetes.io/subnets: subnet-1,subnet-2 #comma separated list of subnet ids
    # alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":443}]'
    # alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-1:0000000000000:certificate/00000000-1111-2222-3333-444444444444  # The AWS Certificate Manager ARN for your HTTPS certificate
#    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-1:0000000000000:certificate/00000000-1111-2222-3333-444444444444  # Comment out if you don't use docker repositories - The AWS Certificate Manager ARN for your HTTPS certificate
#    external-dns.alpha.kubernetes.io/hostname: dockerrepo1.example.com, dockerrepo2.example.com, dockerrepo3.example.com
storageClass:
  enabled: false # For built-in storage class, set storageClass.enabled to false
  name: nexus-storage # For built-in storage class, set storageClass.enabled to false and specify the name of the built-in storage class here e.g. managed-csi for AKS
  provisioner: provisionerName # To use your own storage class set storageClass.enabled to true and specify provisioner. E.g. for AKS use managed-csi. For AWS EKS: ebs.csi.aws.com. In case of AWS EKS cluster running version less than 1.23 use 'kubernetes.io/aws-ebs'
  volumeBindingMode: "WaitForFirstConsumer"
  reclaimPolicy: Retain
#  parameters:
#    type: type
#    fsType: "fsType" # e.g. ext4
#    iopsPerGB: "10"
pvc:
  accessModes: ReadWriteOnce
  storage: 2Gi
  volumeClaimTemplate:
    enabled: false
  existingClaim: null

service:  #Nexus Repo NodePort Service
  annotations: {}
  nexus:
    enabled: false
    type: NodePort
    protocol: TCP
    port: 80
    targetPort: 8081
secret:
  secretProviderClass: "secretProviderClass"
  provider: provider # e.g. aws, azure etc
  dbSecret:
    enabled: false # Enable to apply database-secret.yaml which allows you to specify db credentials
  db:
    user: nxrm-db-user
    userAlias: nxrm-db-user-alias
    password: nxrm-db-password
    passwordAlias: nxrm-db-password-alias
    host: nxrm-db-host
    hostAlias: nxrm-db-host-alias
  nexusAdmin:
    name: "nexusAdminPassword"
    alias: "admin-nxrm-password-alias"
  nexusAdminSecret:
    enabled: false # Enable to apply nexus-admin-secret.yaml which allows you to the initial admin password for nexus repository
    adminPassword: yourinitialnexuspassword #You should change this when you login for the first time
  license:
    name: nexus-repo-license.lic
    licenseSecret:
      enabled: false
      fileContentsBase64: your_license_file_contents_in_base_64
      mountPath: /var/nexus-repo-license
  azure:
    # a managed identity or service principal that has secrets management access to the key vault
    userAssignedIdentityID: "userAssignedIdentityID"
    tenantId: "azureTenantId"
    keyvaultName: yourazurekeyvault
    useVMManagedIdentity: true
    usePodIdentity: false
  aws:
    license:
      arn: arn:aws:secretsmanager:us-east-1:000000000000:secret:nxrm-nexus-license
    adminpassword:
      arn: arn:aws:secretsmanager:us-east-1:000000000000:secret:admin-nxrm-password
    rds:
      arn: arn:aws:secretsmanager:us-east-1:000000000000:secret:nxrmrds-cred-nexus
nexus:
  # Default the pods UID and GID to match the nexus3 container.
  # Customize or remove these values from the securityContext as appropriate for
  # your deployment environment.
  securityContext:
    runAsUser: 200
  properties:
    override: false
    data: null # specify a list of key and values to override default nexus.properties
  extraLabels: {}
  extraSelectorLabels: {}
  docker:
    enabled: false
    type: NodePort
    protocol: TCP
  # registries:
  #   - host: chart.local
  #     port: 5000
  #     secretName: registry-secret
  #     targetPort: 8081

# Enable configmap and add arbitrary data in configmap
config:
  enabled: false
  mountPath: /sonatype-nexus-conf
  data: []