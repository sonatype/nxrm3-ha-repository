apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "nexus.fullname" . }}
  namespace: {{ .Values.namespaces.nexusNs.name }}
  labels:
{{ include "nexus.labels" . | nindent 4 }}
  {{- if .Values.nexus.extraLabels }}
    {{- with .Values.nexus.extraLabels }}
      {{ toYaml . | nindent 4 }}
    {{- end }}
  {{- end }}
{{- if .Values.statefulset.annotations }}
  annotations:
    {{ toYaml .Values.statefulset.annotations | nindent 4 }}
{{- end }}
spec:
  {{- if .Values.statefulset.clustered }}
  replicas: {{.Values.statefulset.replicaCount}}
  {{ else }}
  replicas: 1
  {{ end }}
  serviceName: {{ include "nexus.service.headless" . }}
  selector:
    matchLabels:
      {{- include "nexus.selectorLabels" . | nindent 6 }}
      {{- if .Values.nexus.extraSelectorLabels }}
        {{- with .Values.nexus.extraSelectorLabels }}
          {{ toYaml . | nindent 6 }}
        {{- end }}
      {{- end }}
  template:
    metadata:
      annotations:
        {{- if .Values.nexus.properties.override }}
        checksum/configmap-properties: {{ include (print .Template.BasePath "/configmap-properties.yaml") $ | sha256sum }}
        {{- end }}
        {{- if .Values.statefulset.podAnnotations }}
          {{ toYaml .Values.statefulset.podAnnotations | nindent 8}}
        {{- end }}
      labels:
        {{- include "nexus.selectorLabels" . | nindent 8 }}
        {{- if .Values.nexus.extraSelectorLabels }}
          {{- with .Values.nexus.extraSelectorLabels }}
            {{ toYaml . | nindent 8 }}
          {{- end }}
        {{- end }}
    spec:
      {{- if .Values.serviceAccount.enabled }}
      serviceAccountName: {{ include "nexus.serviceAccountName" . }}
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.statefulset.container.terminationGracePeriod }}
      {{- if .Values.statefulset.initContainers }}
      initContainers:
        {{ toYaml .Values.statefulset.initContainers | nindent 8 }}
      {{- end }}
      {{- if .Values.statefulset.nodeSelector }}
      nodeSelector:
        {{ toYaml .Values.statefulset.nodeSelector | nindent 8 }}
      {{- end }}
      {{- if .Values.statefulset.hostAliases }}
      hostAliases:
        {{ toYaml .Values.statefulset.hostAliases | nindent 8 }}
      {{- end }}
      {{- if .Values.statefulset.imagePullSecrets }}
      imagePullSecrets:
        - name: {{ template "nexus.name" . }}-imagepullsecret
      {{- end }}
      {{- if .Values.statefulset.securityContext }}
      securityContext:
        {{ toYaml .Values.statefulset.securityContext | nindent 8 }}
      {{- end }}
      containers:
        - name: nxrm-app
          image: {{ .Values.statefulset.container.image.repository }}:{{ .Values.statefulset.container.image.nexusTag }}
          imagePullPolicy: {{ .Values.statefulset.container.pullPolicy }}
          securityContext:
            {{ toYaml .Values.nexus.securityContext | nindent 12 }}
          lifecycle:
          {{- if .Values.statefulset.postStart.command }}
            postStart:
              exec:
                command: {{ .Values.statefulset.postStart.command }}
          {{- end }}
          ports:
            - name: nexus-ui
              containerPort: {{ .Values.statefulset.container.containerPort }}
            {{- if .Values.nexus.docker.enabled }}
            {{- range .Values.nexus.docker.registries }}
            - name: docker-{{ .port }}
              containerPort: {{ .port }}
            {{- end }}
            {{- end }}
          resources:
            {{ toYaml .Values.statefulset.container.resources | nindent 12 }}
          startupProbe:
            httpGet:
              path: {{ .Values.statefulset.startupProbe.path }}
              port: {{ .Values.statefulset.container.containerPort }}
            initialDelaySeconds: {{ .Values.statefulset.startupProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.statefulset.startupProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.statefulset.startupProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.statefulset.startupProbe.failureThreshold }}
          livenessProbe:
            httpGet:
              path: {{ .Values.statefulset.livenessProbe.path }}
              port: {{ .Values.statefulset.container.containerPort }}
            initialDelaySeconds: {{ .Values.statefulset.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.statefulset.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.statefulset.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.statefulset.livenessProbe.failureThreshold }}
          readinessProbe:
            httpGet:
              path: {{ .Values.statefulset.readinessProbe.path }}
              port: {{ .Values.statefulset.container.containerPort }}
            initialDelaySeconds: {{ .Values.statefulset.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.statefulset.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.statefulset.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.statefulset.readinessProbe.failureThreshold }}
          env:
            - name: DB_NAME
              value: "{{ .Values.statefulset.container.env.nexusDBName }}"
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "nexus.name" . }}-dbsecret
                  key: db-password
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: {{ template "nexus.name" . }}-dbsecret
                  key: db-user
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ template "nexus.name" . }}-dbsecret
                  key: db-host
            - name: NEXUS_SECURITY_INITIAL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "nexus.name" . }}-adminsecret
                  key: nexus-admin-password
            - name: NEXUS_SECURITY_RANDOMPASSWORD
              value: "false"
            - name: LICENSE_FILE
          {{- if or .Values.aws.secretmanager.enabled .Values.azure.keyvault.enabled  }}
              value: /nxrm-secrets/{{ .Values.secret.license.name }}
          {{ else }}
              value: {{ .Values.secret.license.licenseSecret.mountPath }}/{{ .Values.secret.license.name }}
          {{ end }}
            - name: INSTALL4J_ADD_VM_PARAMS
          {{- if .Values.statefulset.clustered }}
              value: "{{ .Values.statefulset.container.env.install4jAddVmParams }} -Dnexus.licenseFile=${LICENSE_FILE} \
          -Dnexus.datastore.clustered.enabled={{ .Values.statefulset.clustered }} -Djava.util.prefs.userRoot=${NEXUS_DATA}/javaprefs \
          -Dnexus.datastore.nexus.jdbcUrl=jdbc:postgresql://${DB_HOST}:{{ .Values.statefulset.container.env.nexusDBPort }}/${DB_NAME}{{ .Values.statefulset.container.env.jdbcUrlParams }} \
          -Dnexus.datastore.nexus.username=${DB_USER} \
          -Dnexus.datastore.nexus.password=${DB_PASSWORD}"
          {{ else }}
              value: "{{ .Values.statefulset.container.env.install4jAddVmParams }} -Dnexus.licenseFile=${LICENSE_FILE} \
              -Dnexus.datastore.enabled=true -Djava.util.prefs.userRoot=${NEXUS_DATA}/javaprefs \
              -Dnexus.datastore.nexus.jdbcUrl=jdbc:postgresql://${DB_HOST}:{{ .Values.statefulset.container.env.nexusDBPort }}/${DB_NAME}{{ .Values.statefulset.container.env.jdbcUrlParams }} \
              -Dnexus.datastore.nexus.username=${DB_USER} \
              -Dnexus.datastore.nexus.password=${DB_PASSWORD}"
          {{ end }}
          {{- if .Values.statefulset.container.additionalEnv }}
            {{ toYaml .Values.statefulset.container.additionalEnv | nindent 12 }}
          {{- end }}
          volumeMounts:
          {{- if or .Values.aws.secretmanager.enabled .Values.azure.keyvault.enabled .Values.secret.dbSecret.enabled }}
            - name: nxrm-secrets
              mountPath: /nxrm-secrets
          {{- end }}
          {{- if .Values.secret.license.licenseSecret.enabled }}
            - name: license-volume
              mountPath: {{ .Values.secret.license.licenseSecret.mountPath }}
              readOnly: true
          {{ end }}
            - name: nexus-data
              mountPath: /nexus-data
            {{- if .Values.config.enabled }}
            - name: {{ template "nexus.name" . }}-conf
              mountPath: {{ .Values.config.mountPath }}
            {{- end }}
            {{- if .Values.nexus.properties.override }}
            - mountPath: /nexus-data/etc/nexus.properties
              name: {{ template "nexus.name" . }}-properties
              subPath: nexus.properties
            {{- end }}
            {{- if .Values.statefulset.additionalVolumeMounts}}
              {{ toYaml .Values.statefulset.additionalVolumeMounts | nindent 12 }}
            {{- end }}
        {{- if .Values.statefulset.additionalContainers }}
          {{ toYaml .Values.statefulset.additionalContainers | nindent 8 }}
        {{- end }}
      volumes:
      {{- if .Values.config.enabled }}
        - name: {{ template "nexus.name" . }}-conf
          configMap:
            name: {{ template "nexus.name" . }}-conf
      {{- end }}
      {{- if .Values.nexus.properties.override }}
        - name: {{ template "nexus.name" . }}-properties
          configMap:
            name: {{ template "nexus.name" . }}-properties
            items:
            - key: nexus.properties
              path: nexus.properties
      {{- end }}
      {{- if .Values.statefulset.additionalVolumes }}
        {{ toYaml .Values.statefulset.additionalVolumes | nindent 8 }}
      {{- end }}
      {{- if or .Values.aws.secretmanager.enabled .Values.azure.keyvault.enabled .Values.secret.dbSecret.enabled }}
        - name: nxrm-secrets
        {{- if or .Values.aws.secretmanager.enabled .Values.azure.keyvault.enabled }}
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: {{ .Values.secret.secretProviderClass }}
              fsType: ext4
        {{ else }}
          secret:
            secretName: {{ template "nexus.name" . }}-dbsecret
        {{ end }}
      {{ end }}
      {{- if .Values.secret.license.licenseSecret.enabled }}
        - name: license-volume
          secret:
            secretName: {{ .Values.secret.license.name }}
      {{ end }}
  {{- if  and (not .Values.pvc.volumeClaimTemplate.enabled) (not .Values.pvc.existingClaim) }}
        - name: nexus-data
          emptyDir:
            sizeLimit: {{ .Values.pvc.storage }}
  {{- end }}
  {{- if and (not .Values.pvc.volumeClaimTemplate.enabled) ( .Values.pvc.existingClaim ) }}
        - name: nexus-data
          persistentVolumeClaim:
            claimName: {{ .Values.pvc.existingClaim }}
  {{ end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{ toYaml . | nindent 8 }}
    {{- end }}
  {{- if .Values.pvc.volumeClaimTemplate.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: nexus-data
      spec:
        accessModes: [ "{{ .Values.pvc.accessModes }}" ]
        storageClassName: "{{ .Values.storageClass.name }}"
        resources:
          requests:
            storage: {{.Values.pvc.storage }}
  {{- end }}
